{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","components/Container/Container.module.css","redux/actions.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Container/Container.js","components/Section/Section.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","changeFilter","contactsActions","deleteContact","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","includes","getFiteredContacts","ContactForm","useState","setName","setNumber","contactNameId","contactNumberId","dispatch","useDispatch","useSelector","handleInputForm","event","target","value","toast","error","resetForm","className","s","form","onSubmit","preventDefault","validateForm","trim","find","contact","input","type","pattern","title","placeholder","onChange","button","ContactsList","length","list","map","onClick","onRemove","protoTypes","PropTypes","arrayOf","shape","string","isRequired","func","Filter","label","e","Container","children","container","Section","section","App","autoClose","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.dccb0c9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__2yMQL\",\"form\":\"ContactForm_form__1--C4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3C4NO\",\"item\":\"ContactsList_item__Rb1R0\",\"contacts\":\"ContactsList_contacts__Wgcsq\",\"button\":\"ContactsList_button__5iFBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3kA9G\",\"filter\":\"Filter_filter__1WPox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3E9V9\",\"title\":\"Section_title__cODg5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cotainer\":\"Container_cotainer__290RQ\"};","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst changeFilter = createAction('contacts/changeFilter');\nconst deleteContact = createAction('contacts/delete');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\nexport default contactsActions;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const getFiteredContacts = contacts => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(items =>\n      items.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return getFiteredContacts(contacts);\n};\n","import { useState } from 'react';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './ContactForm.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/actions';\nimport { getContacts } from '../../redux/selectors';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactNameId = shortid.generate();\n  const contactNumberId = shortid.generate();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInputForm = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        toast.error(`There are no type input \"${name}\"`);\n    }\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const validateForm = name.trim();\n    if (contacts.find(contact => contact.name === name)) {\n      return toast.error(`${validateForm} Contact already exists`);\n    }\n\n    if (name === '') {\n      return toast.error('Please enter contact name');\n    }\n\n    if (number === '') {\n      return toast.error('Please enter contact number');\n    }\n\n    dispatch(contactsActions.addContact(name, number));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleFormSubmit}>\n      <label>\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"The name can only consist of letters, apostrophe, dash and spaces. For example, Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan, etc.\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleInputForm}\n          id={contactNameId}\n        />\n      </label>\n      <label>\n        <input\n          className={s.input}\n          type=\"tell\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must contain digits and also can contain : spaces, dashes, parentheses and start with '+' \"\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleInputForm}\n          id={contactNumberId}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        {' '}\n        Add Contact{' '}\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './ContactsList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onRemove = id => dispatch(contactsActions.deleteContact(id));\n\n  if (contacts.length === 0) return null;\n  return (\n    <div className={s.contacts}>\n      <ul className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              className={s.button}\n              type=\"button\"\n              onClick={() => onRemove(id)}\n            >\n              delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.protoTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport contactsActions from '../../redux/actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        placeholder=\"Enter name for Search\"\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import propTypes from 'prop-types';\nimport s from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: propTypes.node.isRequired,\n};\n\nexport default Container;\n","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { ToastContainer } from 'react-toastify';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport Container from './components/Container';\nimport Section from './components/Section';\n\nfunction App() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n        <ToastContainer autoClose={3000} />\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport contactsReducer from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst phonebookPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(phonebookPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nconsole.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}